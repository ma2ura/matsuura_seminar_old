---
title: "第3章 R言語入門 後半"
author: "松浦総一"
format:
  html:
    html-math-method: katex
    theme: sandstone
    toc: true
    toc-expand: 2
    fig-width: 8
    fig-height: 6
editor: visual
pdf-engine: lualatex
execute:
  message : false
  warning: false
---

# R言語入門 後半

第3章R言語入門の後半では，内部収益率について学習したあと，内部収益率を計算する独自関数を定義します。
その後，今後の財務分析でよく登場する概念として，整然データ(tidy data)や尺度，データの型について学びます。

## 演習：IRRの計算

```{r setup, echo = FALSE}
knitr::opts_chunk$set(
  class.source = "numberLines lineAnchors"  # ソースを番号付けする
)
```

### IRRを利用した投資判断

第2章ではNPVを用いた投資判断の解説があったが、ここでは**内部収益率**(Internal Rate of Return: IRR)を用いた投資判断の説明とともに、IRRを計算する関数の作成を行います。

IRRは、投資の収益性を測る指標の一つで、投資の現在価値と、投資にかかる費用の現在価値が等しくなる(つまりNPVがゼロとなる)割引率のことです。IRRが高いほど、投資の収益性が高いと言えます。数式で書くと次のようになります。

$$
\sum_{t =0}^{T} \frac{\mathbb{E}[CF_t]}{(1 + y)^t} = 0
$$

この式の$y$がIRRを表しており、この$y$を求めることがIRRの計算になります。 この$y$を計算するために、まずキャッシュ・フローのベクトルを既知として、$y$を計算します。 このIRRが，このプロジェクトXのリスクに応じた割引率$\tilde{R}_X$より大きいか否かで，プロジェクトを実行するかどうかを判断する。

例えば，以下のようなプロジェクトを考える。

-   初期投資 $-100$，
-   第1期のキャッシュ・フロー $40$
-   第2期のキャッシュ・フロー $50$
-   第3期のキャッシュ・フロー $60$

このプロジェクトXのNPVは，

$$
PV = -100 + \frac{40}{(1+y)} + \frac{50}{(1+y)^2}+ \frac{60}{(1+y)^3}
$$

となります。グラフにすると

```{r echo = FALSE}
library(ggplot2)
y <- seq(-0.5, 0.5, 0.01)
NPV <- -100 + 40/(1+y) + 50/(1+y)^2 + 60/(1+y)^3
df <- data.frame(y,NPV)
ggplot(df) + aes(x = y, y = NPV) + geom_line() + geom_hline(yintercept = 0, linetype = "dashed")
```

NPVがゼロになる場合の$y$を求める。解く方程式は次のようになる。

$$
-100 + \frac{40}{(1+y)} + \frac{50}{(1+y)^2}+ \frac{60}{(1+y)^3} = 0
$$

ここで，$(1+y) =Y$とおいて式を変形していく。 $$
\begin{align*}
-100 + \frac{40}{Y} + \frac{50}{Y^2}+ \frac{60}{Y^3} &= 0\\
\Longleftrightarrow  -100Y^3 + 40 Y^2 + 50Y + 60 &= 0\\
\Longleftrightarrow  60 + 50Y + 40 Y^2 - 100Y^3 &= 0\\
\end{align*}
$$

この式を解くための関数である`polyroot()`関数がある。 `polyroot()`関数は，多項式の係数ベクトルをとる。 ついでに`round()`関数をつかって小数点以下第4位で四捨五入します。

```{r}
res <- round(polyroot(c(60, 50, 40, -100)),digits = 4)
print(res)
```

3つの解が出力されているけれど，最初の2つは虚数解となっており，最後の1つが実数解となっているため，ほしい回答は最後の1つです。

この最後の解の実数部分(`+000i`の部分は虚数部分)を取り出すため，実数解のみを返す基本関数`Re()`を使います。

```{r}
Y <- Re(res[3]) # 多項式の三3目の解の実数部部
(IRR <- Y - 1)
```

今回は，多項式の解が3つしかなかったので，目で実数解を探しましたが，もっと多次元の多項式となるとこうはいきません。 たとえば，$Y^7$まで出てくる多項式の場合，

```{r}
res2 <- round(polyroot(c(70, 60, 50, 40, 30, 20, 10, -150)),digits = 4)
print(res2)
```

このように解も7つ出てきます。この中から目で実数解を探すのも面倒なので，実数解のみを取り出す関数を作ります。 ここで，`Im()`関数を使って虚数部分のみをとりだし，そこがゼロとなっていれば，実数解という探し方をします。 教科書ではより精密な方法を採用していますが，ちょっと面倒なので，ここでは解を`round()`関数で小数点以下第4位で四捨五入しています。 その結果，教科書のような方法をとる必要は無くなり，次のように虚数部分がゼロかどうかの判定を行うことができます。

```{r}
Re(res[Im(res) == 0]) - 1# 実数のときにTRUEを返す論理式
```

答えが出ました。

## IRRを計算する独自関数の定義

今まで学習した内容を用いて，IRRを計算する関数を定義していきます。 独自関数の定義するには，`function()`を使います。 いままでは，キャッシュ・フローのベクトルと無リスク利子率を与えると，NPVを計算する関数を定義しましたが，今回は，初期投資を含めたキャッシュ・フローのベクトルを与えるとNPVがゼロとなるIRRを計算する関数を定義します。したがって独自関数の引数は，キャッシュ・フローのベクトルのみとなります。

```{r}
cal_IRR <- function(CF) {
  sol <- polyroot(CF[length(CF):1]) # CFベクトルを逆順にして多項式の解を導出
  sol <- round(sol, digits = 4) # 小数点以下第4位を四捨五入
  x <- Re(sol[Im(sol) == 0]) - 1 # 内部収益率を計算
  return(x)
}
CF <- c(-100, 40, 50, 60) # 例
cal_IRR(CF)
```

変な解をもつキャッシュ・フローの場合

```{r}
CF <- c(-100, 100, 120, -120) # 例
cal_IRR(CF)
```

内部収益率となりうる正の実数解が2つあるので，IRR法は使えなさそう，となる。

### 多項式の解を求める方法：ニュートン法

この式を解くことは、$y$についての方程式を解くことになります。この方程式を解く方法は、二分法やニュートン法などがありますが、ここではニュートン法を用いて解いていきます。

ニュートン法は、ある関数$f(x)$の解を求める方法で、次のような式で表されます。 $$
x_{n+1} = x_n - \frac{f(x_n)}{f'(x_n)}
$$

この式を用いて、IRRを求める関数を作成していきます。

### IRRの計算

まずは、IRRを求める関数を作成していきます。IRRを求める関数は、次のようになります。

```{r}
calc_irr <- function(cash_flow, initial_investment, max_iter = 100, tol = 1e-10) {
  # cash_flow: キャッシュフローのベクトル
  # initial_investment: 初期投資
  # max_iter: 最大繰り返し回数
  # tol: 許容誤差
  # return: IRR (内部収益率)

}
```

# データの型 (付録)

プログラミング言語でデータ分析を行う場合に，非常に重要になるのが，データの型です。 とりわけ，経営の実証研究では，複数の変数を複数期間にわたって記録したパネル・データを扱うことが多いので，データの型を理解しておくことは，非常に重要です。 また，Rの神と呼ばれるHadley Wickham氏は，データの型を理解することを，データ分析の第一歩とし，その一貫として**整然データ(tidy data)**という考え方を提唱しています。 整然データとは，次のような原則に従って構築されたデータのことです(Wickham, 2014) 参考\[https://id.fnshr.info/2017/01/09/tidy-data-intro/\]。

1.  個々の変数 (variable) が1つの列 (column) をなす。
2.  個々の観測 (observation) が1つの行 (row) をなす。
3.  個々の観測の構成単位の類型 (type of observational unit) が1つの表 (table) をなす。
4.  個々の値 (value) が1つのセル (cell) をなす

プログラミング言語には，データの型があり，よく使うものとして，数値型，文字型，論理型などがあります。 Rでは，これらのデータ型をオブジェクトと呼びます。

例えば，次のような表を考えます。

| 地点 |   6時    |   12時   |   18時   |
|:----:|:--------:|:--------:|:--------:|
| 札幌 | 12℃ 晴れ | 15℃ 晴れ | 13℃ 曇り |
| 大阪 | 20℃ 曇り |  24℃ 雨  |  22℃ 雨  |
| 福岡 |  23℃ 雨  | 25℃ 晴れ | 25℃ 晴れ |

天気予報で見かけそうなこの表は，人間にとっては分かりやすいですが，コンピュータにとっては，分かりにくいものです。 コンピュータが理解しやすい整然データとして表すなら，次のような表になります。

| 地点 | 時間 | 天気 | 気温(℃) |
|:----:|:----:|:----:|:-------:|
| 札幌 | 6時  | 晴れ |   12    |
| 札幌 | 12時 | 晴れ |   15    |
| 札幌 | 18時 | 曇り |   13    |
| 大阪 | 6時  | 曇り |   20    |
| 大阪 | 12時 |  雨  |   24    |
| 大阪 | 18時 |  雨  |   22    |
| 福岡 | 6時  |  雨  |   23    |
| 福岡 | 12時 | 晴れ |   25    |
| 福岡 | 18時 | 晴れ |   25    |

この表は，地点，時間，天気，気温の4つの変数があり1つの列をつくっています(ルール1)。 大阪12時の天気は雨，気温は12℃といったように1つの行が1つの観測を表しています(ルール2)。 このデータには種類の異なる観測はない(ルール3)。 また，各セルには1つの値が入っています(ルール4)。 よって，これが整然データとなります。

<aside>上の表をワイド型，下の表をロング型ともいい，Rでは，ロング型のデータを扱うことが多いです。もちろんワイドをロングに，またはその逆にする関数もあります。</aside>

また，このデータは4つの変数を含んでおり，それぞれの変数には，次のようなデータ型があります。

-   地点: 文字型
-   時間: 文字型
-   天気: 文字列
-   気温: 数値型

このように1つの変数には，同じデータ型のデータが入っているようにします。数値型のデータの中に1つでも文字列が入っていると，その変数は文字型となります。

# データフレーム入門

Rでは，データを扱うためのデータ型として，データフレーム(data frame)というものがあり，非常によく使うので，ここでしっかり説明しておきます。

先ほど分析に使った`ch03_daily_stock_return.csv`を読み込んでみます。このcsvファイルとは，Comma-Separated-Valuesの略で，値がカンマで区切られているテキストファイルです。

読み込むには，`readr`パッケージの`read_csv()`関数を使います。

```{r}
library(readr)
daily_stock_return <- read.csv("ch03_daily_stock_return.csv")
```

ここでエラーが出る人は，以下の可能性を検討します。

-   ソースコードに誤字がある
-   `ch03_daily_stock_return.csv`の場所が違う
-   `ch03_daily_stock_return.csv`が存在しない
-   `readr`パッケージがインストールされていない
-   `readr`パッケージが読み込まれていない

まず始めに，ソースコードが間違っていないかどうかを確認します。大文字と小文字の間違い，ハイフンとアンダースコアの間違い，スペースの有無などを確認します。

次に，読み込もうとしているフォルダを確認します。そのためには，

```{r eval=FALSE}
getwd() # 現在の作業ディレクトリを表示する
setwd() # 作業ディレクトリの場所を指定する
```

ファイルを置いていて，分析結果を保存するための作業用フォルダの中を確認します。そこにファイルがちゃんと存在しているのであれば，`setwd()`関数で作業ディレクトリをファイルが補完されているフォルダへと変更します。

### データフレームに対する基本操作

データの中をさっくり確認するには，`head()`関数を使って，先頭6行を出力します。

```{r}
head(daily_stock_return)
```

出力結果を見ると，1行目に，`# A tibble: 6 x 3`という文字があります。これは，`tibble`というデータフレームの一種であることを示しており，6行・3列のデータとなっていることを表します。

<aside>`tibble`は，`data.frame`の拡張版で，`data.frame`の機能を継承しているので，`data.frame`として扱っても問題ありません。</aside>

データの行数と列数を確認するには，

```{r}
nrow(daily_stock_return) # 行数
ncol(daily_stock_return) # 列数
```

とします。 このデータフレーム(正確にはtibbleだけれど同じように扱う)の構造を確認するには，`str()`関数を使います。

```{r}
str(daily_stock_return)
```

出力結果の1行目をみると，`spc_tbl_ [21 × 3]`とあり，21行・3列のデータであることがわかります。 2行目から4行目はデータの構造を表しています。 2行目の`data : Date[1:21]` は日付型のデータであることを表しています。 3行目と4行目の`firm : num [1:21]`は数値型のデータであることを表しています。

この`daily_stock_return`データフレームの`firm1`という変数を取り出すには，`$`演算子を使います。

```{r}
daily_stock_return$firm1
```

ベクトルと同じように様々な演算ができるようになりました。 平均値を出すには`mean()`，中央値なら`median()`，最大値なら`max()`，最小値なら`min()`，分散なら`var()`，標準偏差なら`sd()`を使います。

```{r}
mean(daily_stock_return$firm1) # 平均値
median(daily_stock_return$firm1) # 中央値
max(daily_stock_return$firm1) # 最大値
min(daily_stock_return$firm1) # 最小値
var(daily_stock_return$firm1) # 分散
sd(daily_stock_return$firm1) # 標準偏差
```

2変数の統計量として共分散や相関係数を出すには，`cov()`，`cor()`を使います。

```{r}
cov(daily_stock_return$firm1, daily_stock_return$firm2) # 共分散
cor(daily_stock_return$firm1, daily_stock_return$firm2) # 相関係数
```

相関係数の定義通り，共分散をそれぞれの標準偏差で割ると相関係数になるかどうかを確認してみます。

$$
\rho_{X,Y} = \frac{\mathbb{Cov}[X, Y]}{\sigma_X \sigma_Y}
$$

```{r}
s_12 <- cov(daily_stock_return$firm1, daily_stock_return$firm2) # 共分散
s_1 <- sd(daily_stock_return$firm1)
s_2 <- sd(daily_stock_return$firm2)
s_12 / (s_1 * s_2) # 相関係数
```

同じになりました。

`firm1`の中で最も日次リターンが低かった日付を調べる方法を考えます。ここでは`which.min()`関数を用いて，最小値をとる要素のインデックスを調べます。

```{r}
worst_day_ID <- which.min(daily_stock_return$firm1)
worst_day_ID
```

最小の値がインデックスが20の値であること示されている。このインデックスを使って，`daily_stock_return`データフレームの20行目を取り出します。

```{r}
daily_stock_return[worst_day_ID, ]
min(daily_stock_return$firm1)
```

最小の値$-0.07207064$が20番目の値$-0.0721$と一致しているので，最小の値を見つけられていることが分かる。

```{r}
nrow(daily_stock_return)
```

データフレームの行数を調べるには，`nrow()`関数を使います。このデータフレームの行数は21行であることがわかります。

# ファクター型と日付型

## ファクター型入門

ファクター型の特徴を理解するために、教科書にある例を使って説明します。

```{r ch03_46}
firm_ID <- c(1,2,3) # 企業コード的なもの
name <- c("Firm A", "Firm B", "Firm C") # 企業名
industry <- c("Machinery", "Chemicals", "Machinery") # 業種
sale <- c(120, 200, 340)
firm_data <- data.frame(firm_ID, name, industry, sale) # データフレームの作成
head(firm_data)
```

これで，企業コード，企業名，業種、売上高の4つの変数を持つデータフレームができました。構造を`str()`で確認します。

```{r}
str(firm_data)
```

4つの変数が3つの観測値をもっており、

-   firm_ID: 数値型 `num`
-   name: 文字型 `chr`
-   industry: 文字型 `chr`
-   sale: 数値型 `num`

となっています。 `summary()`関数で記述統計量を確認してみます。

```{r}
summary(firm_data)
```

`firm_ID`が数値型であるため、平均(Mean)が計算されていますが、`firm_ID`は企業を識別するコードであり、平均をとっても意味はありません。 `name`や`industry`は文字列なので何も計算されていません。 `sale`は数値型なので、平均や最大値、最小値などが計算されています。

実際は、`firm_ID`は数字が入ったベクトル変数ですが、数字は企業を表すラベルであるため、名義尺度です。`industry`は業種というカテゴリーを表す文字列です。このような変数を扱うときには、`factor()`関数を使って、ファクター型に変換します。

```{r}
firm_data$firm_ID <- as.factor(firm_data$firm_ID)
firm_data$industry <- as.factor(firm_data$industry)
```

もう一度`str`関数を使って構造を確認します。

```{r}
str(firm_data)
```

`firm_ID`と`industry`がファクター型になっていることが分かります。ここでもう一度`summary()`を使ってみます。

```{r}
summary(firm_data)
```

`firm_ID`と`industry`の表示が変わりました。 ファクター型は、カテゴリーを表す変数として扱うことができ、カテゴリーごとにいくつのデータが存在するのかを確認することができます。 適切な分析結果を得るためにも、名義尺度の変数は、ファクター型に変換しておくことが重要です。企業分析の場合は、企業コードや業種コードなどをファクター型にします。

## 日付型入門

日付型の特徴を理解するために、教科書にある例を使って説明します。

```{r}
date <- c("2021/04/01", "2021/04/02", "2021/04/03", "2021/04/04", "2021/04/05")
stock_return <- c(0.02, -0.01, 0.03, 0.06, 0.05)
stock_return_data <- data.frame(date, stock_return)
head(stock_return_data)
```

2つの変数`data`と`stock_return`がそれぞれ5つの要素をもっているデータフレームを作りました。構造を確認してみます。

```{r}
str(stock_return_data)
```

`date`は文字列、`stock_return`は数値型となっています。 ここで`date`は日付を表す文字列ですが、文字列として扱われているため、日付としての計算ができません。

Rに`2021/04/01`のような日付情報を日付型のデータとして認識してもらう方法はいくつかありますが、ここでは基本関数の`as.Date()`関数を使う方法と、`tidyverse`パッケージ群の1つである`lubridate`パッケージを使う方法を説明します。

```{r ch04_49}
stock_return_data$date <- as.Date(stock_return_data$date)
str(stock_return_data)
```

`date`変数の方が`Date`に成りました。`summary()`関数を使ってみます。

```{r}
summary(stock_return_data)
```

日付の`date`も最小値は平均などが出力されていることが分かります。 日付型`Date`は、日付としての計算ができるようになります。

```{r}
# 日数の加算
stock_return_data$date + 1
# 日数の差
stock_return_data$date[3] - stock_return_data$date[1]
```

このように`Date`型にすれば、日数の加算や二時点間の日数の差を計算することができます。

次に`lubridate`を用いた方法をみていきましょう。 `lubridate`は`tidyverse`パッケージ群の1つで、日付型のデータを扱うためのパッケージです。かなり便利なので使いこなせるように頑張りましょう。 先の日付データは`2021/04/01`と年・月・日がスラッシュで区切られているので、`ymd()`関数を使って、日付型に変換します。

```{r}
library(lubridate)
stock_return_data$date <- ymd(stock_return_data$date)
str(stock_return_data)
```

この日付データから年、月、日を取り出すには、`year()`、`month()`、`day()`関数を使います。

```{r}
year(stock_return_data$date) # これはよく使う。
month(stock_return_data$date)
day(stock_return_data$date)
```

# 外部パッケージの使い方

## 外部パッケージのインストール

Rの魅力の1つに，多くの外部パッケージが存在することが挙げられます。外部パッケージを使うことで，Rに様々な機能を追加することができます。もともとRに組み込まれている基本関数とは異なり，外部パッケージを使うためには，まずインストールする必要があります。インストールするには，`install.packages()`関数を使います。例えば，`tidyverse`パッケージをインストールするには，以下のようにします。

```{r}
# install.packages("tidyverse") # 最初の1回だけ実行
```

`tidyverse`パッケージ群に含まれるパッケージに，グラフ作成のための`ggplot2`がある。`ggplot2`をインストールするには，以下のようにします。 作図用データを作成します。

```{r ch03_54}
initinal_cost <- seq(80, 100, by = 1)
IRR <- rep(NA, length(initinal_cost))
for (i in 1:length(initinal_cost)) {
  IRR[i] <- cal_IRR(c(-initinal_cost[i],100))
}
figure_data <- data.frame(initinal_cost, IRR) # データフレーム作成
head(figure_data) # データの確認
```

これをまずは基本関数`plot()`で作図してみる。

```{r}
plot(figure_data$initinal_cost, figure_data$IRR, type = "l")
```

次にこれを`ggplot2`パッケージを使って書いてみます。

```{r}
library(tidyverse)
g <- ggplot(figure_data) + aes(x = initinal_cost, y = IRR) + geom_line()
print(g)
```

折れ線グラフだけだと分かりづらいので，点をプロットしてみます。

```{r}
g <- g + geom_point()
print(g)
```

点が加わりました。さらに雑誌Economist風のデザインにしてみます。

```{r}
library(ggthemes)
g <- g + theme_economist()
print(g)
```

次に，グラフ内に文字を追加してみます。 グラフ内に文字列を追加するには`annotate()`関数を使います。

```{r ch03_58}
g <- g + annotate( # 位置を指定して文字列を追加
  geom = "text",
  x = 99,
  y = 0.05,
  label = "Initial Cost 100"
  ) + annotate(# 始点や終点などを指定して矢印を追加
  geom = "segment",
  x = 100,
  xend = 100,
  y = 0.04,
  yend = 0.01,
  color = "black",
  size = 0.5,
  arrow = arrow(length = unit(0.3, "cm"))
  )
print(g)
```

# 練習問題

## 練習問題1

```{r}
library(ggplot2)
CF <- c(-250, 50, 120, 100) # キャッシュ・フロー
R <- seq(0, 0.1, 0.01) # 無リスク利子率のベクトル
NPV <- CF[1] + CF[2] / (1 + R) + CF[3] / (1 + R)^2 + CF[4] / (1 + R)^3
df <- data.frame(NPV, R) # データフレームの作成
ggplot(df) + aes(x = R, y = NPV) + geom_line() # 作図
```

## 練習問題2

```{r}
R <- 0.05 # 無リスク利子率
CF <- 100 # キャッシュ・フロー

NPV <- (100/0.05) / (1 + R)^35 # NPVの計算
print(NPV)
```

## 練習3

元本$P$円を年利$R$で1年間運用することを考えよう。 1年当たりの複利の回数を$n$とおいたとき，$T$年後の将来価値は以下のように書ける. $$
FV(n) = \left ( \frac{1+R}{n}\right )^{Tn} P.
$$

将来価値を計算する関数を作成せよ。

```{r}
cal_FV <- function(CF, R, n, T){
  FV <- (1 + R / n)^(T * n) * CF
  return(FV)
}
cal_FV(100,0.1,2,2)
```

## 練習4\*

複利の頻度を無限大にすると連続複利に収束します。すると将来価値は次式で表されます。 $$
\lim_{n \rightarrow \infty} FV(n) = P \mathrm{e}^{RT}
$$

ここで、元本100万円を年利10％、連続複利で1年間運用した場合の将来価値を計算してみる。

```{r}

```

## 練習5\*

-   元本100万円
-   年利10%
-   1年間運用

1年当たりの複利の回数を$n$とおき，$n$を変化させたときの将来価値$FV(n)$がどう変化するのか可視化する。

```{r}
CF <- 100
R <- 0.1
T <- 1
FV <- rep(NA,500)
for (i in 1:500){
  FV[i] <- cal_FV(CF, R, n=i, T)
}
plot(FV, type = "l")
abline(h = 100 * exp(0.1), col = "red")
```

将来価値$100\times \mathrm{e}^{0.1}$に収束していることがわかる。

## 練習6

## 練習7
